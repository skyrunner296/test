{"version":3,"file":"component---src-pages-using-ssr-js-213916578fc96cc9c32b.js","mappings":"6LAcA,IAwCA,EAxCe,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,UACHC,EAAAA,EAAAA,IAAe,cAU5B,OACE,gCACE,uBACEC,MAAO,CACLC,OAAO,SACPC,SAAS,sBACTC,QAAQ,uBAGV,4BAAOL,GACP,0BACEE,MAAO,CACLI,UAAU,iBACVC,SAAS,mBAHb,MAMK,IAAIC,MAAOC,cANhB,oBAQE,qBAAGC,KAAK,4BAAR,YAKT,C,+CCrCD,SAASC,EAAT,GAAgD,IAAD,IAAhCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,MAAOb,EAAY,EAAZA,SACzBc,GAASb,EAAAA,EAAAA,IAAe,cAAxBa,KAYFC,EAAkBH,GAAeE,EAAKE,aAAaJ,YACnDK,EAAY,UAAGH,EAAKE,oBAAR,aAAG,EAAmBH,MAExC,OACE,gCACE,6BAAQI,EAAkBJ,EAAN,MAAiBI,EAAiBJ,GACtD,wBAAMK,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAASN,IACnC,wBAAMO,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBAAMD,KAAK,kBAAkBC,SAAS,UAAAL,EAAKE,oBAAL,eAAmBK,SAAnB,KACtC,wBAAMH,KAAK,gBAAgBC,QAASN,IACpC,wBAAMK,KAAK,sBAAsBC,QAASJ,IACzCf,EAGN,CAEDW,EAAIW,aAAe,CACjBV,YAAY,IAQd,K,6GClBaW,EAAO,kBAAM,gBAAC,IAAD,CAAKV,MAAM,aAAjB,EAEpB,UA9BiB,SAAC,GAAoB,IAAlBW,EAAiB,EAAjBA,WAClB,OACE,gBAAC,IAAD,KACE,0CACe,kDAEf,4IAE+C,IAC7C,qEAHF,KAKA,uBACEtB,MAAO,CAAEuB,MAAO,QAASC,aAAc,wBACvCC,IAAI,eACJC,IAAKJ,EAAWK,UAElB,2DACkC,IAChC,qBAAGnB,KAAK,oFAAR,6CAFF,KAOA,gBAAC,KAAD,CAAMoB,GAAG,KAAT,2BAGL,C","sources":["webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/pages/using-ssr.js"],"sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: `var(--size-content)`,\n          padding: `var(--size-gutter)`,\n        }}\n      >\n        <main>{children}</main>\n        <footer\n          style={{\n            marginTop: `var(--space-5)`,\n            fontSize: `var(--font-sm)`,\n          }}\n        >\n          Â© {new Date().getFullYear()} &middot; Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title        \n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nSeo.defaultProps = {\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst UsingSSR = ({ serverData }) => {\n  return (\n    <Layout>\n      <h1>\n        This page is <b>rendered server-side</b>\n      </h1>\n      <p>\n        This page is rendered server side every time the page is requested.\n        Reload it to see a(nother) random photo from{\" \"}\n        <code>dog.ceo/api/breed/shiba/images/random</code>:\n      </p>\n      <img\n        style={{ width: \"320px\", borderRadius: \"var(--border-radius)\" }}\n        alt=\"A random dog\"\n        src={serverData.message}\n      />\n      <p>\n        To learn more, head over to our{\" \"}\n        <a href=\"https://www.gatsbyjs.com/docs/reference/rendering-options/server-side-rendering/\">\n          documentation about Server Side Rendering\n        </a>\n        .\n      </p>\n      <Link to=\"/\">Go back to the homepage</Link>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"Using SSR\" />\n\nexport default UsingSSR\n\nexport async function getServerData() {\n  try {\n    const res = await fetch(`https://dog.ceo/api/breed/shiba/images/random`)\n    if (!res.ok) {\n      throw new Error(`Response failed`)\n    }\n    return {\n      props: await res.json(),\n    }\n  } catch (error) {\n    return {\n      status: 500,\n      headers: {},\n      props: {},\n    }\n  }\n}\n"],"names":["children","useStaticQuery","style","margin","maxWidth","padding","marginTop","fontSize","Date","getFullYear","href","Seo","description","title","site","metaDescription","siteMetadata","defaultTitle","name","content","property","author","defaultProps","Head","serverData","width","borderRadius","alt","src","message","to"],"sourceRoot":""}